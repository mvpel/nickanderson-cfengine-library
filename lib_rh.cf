bundle agent rh_update_routes(ipregex, routes) {
# Expects string, array
# Note: This bundle depricates rh_add_interface_routes. I see no good reason to continue using it.
#
# ipregex is a regular expression that matches the ip on the interface you want these routes added
#   hint: ipregex should match an ip that can communicate with the specified gateway
#         for example if your routing a network via 192.168.0.1 and the network is a /24 network
#         (255.255.255.0 netmask) then you should have an ip in the range 192.168.0.1-254 on the
#         host your trying to add this route on. So a regex of 192\.168\.0\.[0-9]++ would work.
# routes is an array keyed on the network you want to route to with the string value being the gateway to use.
#
# NOTE: Unfortunately the only way I could think of to automatically determine the interface a route
#       needs added for is to use regcmp to compare the ipregex to the array of addresses. It would be
#       better if there was some way to use the iprange function to determine which nic an ipaddress
#       is on, but that does not currently work, or I am thus far to dense to figure out how.
#       So right now I am stuck with using ugly ipaddress regular expressions which can be error prone
#       in construction especially when you start networks that dont fall into octet boundaries
#
#       This causes there to be a limitation of usage on this bundle, you MUST NOT MIX
#       routes that go on seperate interfaces in the same route configuration array. I believe
#       this limitation could be surpassed if we could use the iprange or similar function.
#
# vars:
#    "ipregex_mgmt" string => "192\.168\.0\.[0-9]++";
#    "management[CIDRNETWORK]"
#        string => "GATEWAY",
#        comment => "What do you need this for";
#
#    "management[10.119.156.0/26]"
#        string => "192.168.0.1",
#        comment => "Needed for talking to the special network used for backup servers";
#
# methods:
#    "any" usebundle => rh_add_routes("192\.168\.0\.[0-9]++", "context.management");
#
    vars:
        "nics"          slist => getindices("sys.ipv4");
        #"route_file"    string => "/etc/sysconfig/network-scripts/route-$(interface)";
        "route_index" slist => getindices("$(routes)");

    classes:
        "supported_os" or => { "centos_5", "redhat_5" };

        "$(nics)_matches_ipregex" expression    => regcmp("$(ipregex)", "$(sys.ipv4[$(nics)])"),
            comment => "Determine which network interface has an ip that we are adding routes for.
                        We need to know this so that we can insert the route in the proper
                        file for reboot persistence.";


    files:
        # We only want to add persistent routes to the interface that matches the ipregex so we ifvarclass on $(nics)_matches_ipregex
        (centos_5|redhat_5)::
            "/etc/sysconfig/network-scripts/route-$(nics)"
                create      => "true",
                perms       => mog("644", "root", "root"),
                edit_line   => replace_or_add("$(route_index).*", "$(route_index) via $($(this.routes)[$(route_index)])"),
                classes     => if_repaired("persistent_route_updated_for_$(route_index)"),
                ifvarclass  => "$(nics)_matches_ipregex",
                comment     => "Replace any conflicting routes and ensure persistent across reboots";

    commands:
        # We only attempt to delete a route if we have modified the persistent route file
        "/sbin/ip route del $(route_index)"
            ifvarclass  => canonify("persistent_route_updated_for_$(route_index)"),
            classes     => "attempted_route_removal_for_$(route_index)",
            comment     => "Delete any possibly conflicting old route before adding the new one";

        # We only attempt to add a route if we have modified the persistent route file
        "/sbin/ip route add $(route_index) via $($(routes)[$(route_index)])"
            ifvarclass  => canonify("persistent_route_updated_for_$(route_index)"),
            classes     => "attempted_route_addition_for_$(route_index)",
            comment     => "Add the new route";

    reports:
        cfengine::
            "Persistent route updated for $(route_index) via $($(routes)[$(route_index)]) on dev $(nics)"
                ifvarclass => canonify("persistent_route_updated_for_$(route_index)");

        !supported_os::
            "Sorry I don't know how to work with this OS";
}

bundle agent rh_update_interface_settings(nic, config) {
# expects string, array
# nic: interface to operate on
# config: configuration array containting keys that are valid options for 
#         redhat style interface configuration
#
# note: this bundle only alters settings that have been directed, any other settings 
#       in the file that are not managed will not be modifed.
#
#       
# example usage:
#    vars:
#            "nics"              slist   => { "eth0", "eth1" };
#
#            # this would work, you will be limited to taking action and editing
#            # interfaces that are already detected so its reccomended to manually
#            # specify the nics as above
#            #"nics"              slist   => getindices("sys.ipv4");
#
#            "eth0[DEVICE]"      string  => "eth0";
#            "eth0[BOOTPROTO]"   string  => "none";
#            "eth0[ONBOOT]"      string  => "yes";
#            "eth0[IPADDR]"      string  => "192.168.35.11";
#            "eth0[NETMASK]"     string  => "255.255.255.0";
#
#            "eth1[DEVICE]"      string  => "eth1";
#            "eth1[BOOTPROTO]"   string  => "none";
#            "eth1[ONBOOT]"      string  => "yes";
#            "eth1[IPADDR]"      string  => "172.16.210.65";
#            "eth1[NETMASK]"     string  => "255.255.255.192";
#
#
#    methods:
#
#    "any" usebundle => rh_update_interface_settings("$(nics)", "main.$(nics)");


    files:
        #"/tmp/ifcfg-$(nic)"
        "/etc/sysconfig/network-scripts/ifcfg-$(nic)"
            comment         => "configure interface persistent settings",
            edit_defaults   => no_backup,
            create          => "true",
            #perms           => mog("644", "root", "root"),
            edit_line       => set_variable_values2("$(this.promiser)", "$(config)"),
            classes         => if_repaired("ifupdown_$(nic)");

    commands:
        # todo: figure out how to limit this to a single up/down iteration
        # should be able to use and() and not() with ifvarclass but 
        # no such fncall "and()" in promise with 3.2.1 :(
        "/bin/echo /sbin/ifdown $(nic)"
            ifvarclass  => "ifupdown_$(nic)",
            #ifvarclass  => and(not("downed_interface_$(nic)"), "ifupdown_$(nic)"),
            classes     => if_repaired("downed_interface_$(nic)"),
            comment     => "down the interface with old configuration";

        "/bin/echo /sbin/ifup $(nic)"
            ifvarclass  => "ifupdown_$(nics)",
            #ifvarclass  => and(not("uped_interface_$(nic)"), "ifupdown_$(nic)"),
            classes     => if_repaired("uped_interface_$(nic)"),
            comment     => "bring up the interface with new configuration";

}




bundle agent create_update_yum_repo(path) {
# Creates repomd (xml-rpm-metadata) repository 
# Updates metadata if any packages are added changed or removed
# Expects full path to repository directory
#    vars:
#        "updates_repo" string => "/var/repo_mirror/updates";
#
#    methods:
#        "supplemental_repo" usebundle => create_update_yum_repo("/var/repo_mirror/supplemental");
#        "updates_repo" usebundle => create_update_yum_repo("$(updates)");


    files:
        "$(path)/."
            create => "true",
            perms  => mog("755", "root", "root"),
            comment => "Ensure repository root directory exists";

        # Only check 1 level deep otherwise you will be detecting the change in the metadata itself as well.
        # That in turn will lead to an execution of creatrepo --update each time.
        "$(path)"
            changes         => detect_content,
            depth_search    => recurse("1"),
            classes         => if_repaired("update_repo_metadata"),
            comment         => "If any changes are detected we need to signal to update the metadata";

    classes:
        "repo_exists"    expression => fileexists("$(path)/repodata/repomd.xml"),
            comment => "Check if a repo exists yet";


    commands:
        "/usr/bin/createrepo $(path)"
            ifvarclass => not("repo_exists"),
            comment => "Create repository if one does not exist";

        # We only want to update the repo once per run. The metadata has not 
        # yet been updated. Update it and signal that it has been updated if 
        # the command returns zero.
        !(repo_metadata_updated)::
        "/usr/bin/createrepo --update $(path)"
            ifvarclass => "update_repo_metadata",
            classes    => if_repaired("repo_metadata_updated"),
            comment    => "We need to update the metadata since a change was detected, but only once per run";


}

bundle agent set_selinux_disabled {
# This bundle disables selinux
# If its currently enabled, it disables it
# It makes sure that it is configured to be disabled on next boot (via config file)
# Note: If enabled currently this just sets it to permissive, so you will have
#       extra logging until the next reboot.
#
    vars:
        "config[SELINUX]"   string  => "disabled";

        # If neither one of these is set, its the first pass, we only need to set this variable once
        !(selinux_disabled|selinux_needs_disabled)::
            "selinux_status"
                string => execresult("/usr/sbin/getenforce", "noshell"),
                policy => "overridable";

    classes:
        "selinux_disabled"  expression => regcmp("Permissive|Disabled", "$(selinux_status)");

        "selinux_needs_disabled" not => "selinux_disabled";
            

    commands:
        # Only set it once
        # If its not disabled, but needs disabled do it and raise a class
        !selinux_disabled::
            "/usr/sbin/setenforce 0"
                classes => "selinux_disabled",
                ifvarclass  => "selinux_needs_disabled",
                comment     => "Disable selinux, it causes issues without proper security
                                contexts and sadly no one wants to spend time on that";
    files:
        "/etc/selinux/config"
            edit_line => set_variable_values2("$(this.promiser)", "set_selinux_disabled.config"),
            comment     => "Make disable persistent across reboot";
}

bundle agent config_yum_client_repos(config){
# Expects array with yum repo configurations
#   vars:
#       "setrepo[repositoryid][name]"                string => "RedHat 5 Updates";
#       "setrepo[repositoryid][baseurl]"             string => "url://server1/path/to/repository/";
#       "setrepo[repositoryid][metalink]"            string => "";
#       "setrepo[repositoryid][mirrorlist]"          string => "";
#       "setrepo[repositoryid][enabled]"             string => "";
#       "setrepo[repositoryid][gpgcheck]"            string => "";
#       "setrepo[repositoryid][repo_gpgcheck]"       string => "";
#       "setrepo[repositoryid][gpgkey]"              string => "";
#       "setrepo[repositoryid][gpgcakey]"            string => "";
#       "setrepo[repositoryid][exclude]"             string => "";
#       "setrepo[repositoryid][includepkgs]"         string => "";
#       "setrepo[repositoryid][enablegroups]"        string => "";
#       "setrepo[repositoryid][failovermethod]"      string => "";
#       "setrepo[repositoryid][keepalive]"           string => "";
#       "setrepo[repositoryid][timeout]"             string => "";
#       "setrepo[repositoryid][http_caching]"        string => "";
#       "setrepo[repositoryid][retries]"             string => "";
#       "setrepo[repositoryid][throttle]"            string => "";
#       "setrepo[repositoryid][bandwidth]"           string => "";
#       "setrepo[repositoryid][sslcacert]"           string => "";
#       "setrepo[repositoryid][sslverify]"           string => "";
#       "setrepo[repositoryid][sslclientcert]"       string => "";
#       "setrepo[repositoryid][metadata_expire]"     string => "";
#       "setrepo[repositoryid][mirrorlist_expire]"   string => "";
#       "setrepo[repositoryid][proxy]"               string => "";
#       "setrepo[repositoryid][proxy_username]"      string => "";
#       "setrepo[repositoryid][proxy_password]"      string => "";
#       "setrepo[repositoryid][username]"            string => "";
#       "setrepo[repositoryid][password]"            string => "";
#       "setrepo[repositoryid][cost]"                string => "";
#       "setrepo[repositoryid][skip_if_unavailable]" string => "";
#
#   methods:
#       "any"   usebundle => config_yum_client_repos("context.setrepo");

    vars:
        # Hopefully someday getindices will support multidimensional arrays and we 
        # can get rid of this valid_entries list.
        "valid_entries" slist => { "name", "baseurl", "metalink", "mirrorlist",
                                    "enabled", "gpgcheck", "repo_gpgcheck",
                                    "gpgkey", "gpgcakey", "exclude", 
                                    "includepkgs", "enablegroups", "failovermethod",
                                    "keepalive", "timeout", "http_caching", "retries",
                                    "throttle", "bandwidth", "sslcacert", "sslverify",
                                    "sslclientcert", "metadata_expire", "mirrorlist_expire",
                                    "proxy", "proxy_username", "username", "password", "cost",
                                    "skip_if_unavailable", };
        "repoids" slist => getindices("$(config)");
    
    files:
        "/etc/yum.repos.d/$(repoids).repo"
            create => "true",
            edit_line   => prepend_if_no_line("[$(repoids)]");

        # Using replace_or_add instead of set_variable_values2 here because we
        # need to loop on the second dimension of the array and getindices does
        # not currently support that, we use the valid_entries list instead.
        "/etc/yum.repos.d/$(repoids).repo"
            create => "true",
            edit_line       => replace_or_add("$(valid_entries)=.*", "$(valid_entries)=$($(config)[$(repoids)][$(valid_entries)])"),
            comment         => "Completely manage specific repo settings";

}

bundle agent rh_set_hostname(fqdn){
# Expects string
# You should be passing the canonical fqdn here, short hostnames are bad for your health

    files:
        centos_5|redhat_5::
            "/etc/sysconfig/network"
                edit_line => replace_or_add("HOSTNAME=.*", "HOSTNAME=$(fqdn)"),
                classes   => if_repaired("update_running_hostname"),
                comment   => "Set the system canonical hostname";

    commands:
        update_running_hostname::
            "/bin/hostname $(fqdn)"
                comment => "Update the hostname on the running system so we dont have to wait for a reboot";
}

bundle agent rh_remove_rhn_plugin{
# This is a common function on many internal machines
# It would be preferable to just disable the plugin, but 
# 3.2.1 is affected by a bug in select_region that may cause a segfault
    packages:
        "yum-rhn-plugin"
            package_policy => "delete",
            package_method => yum_rpm;
}




###########################################################################
#                               depricated                                #
###########################################################################

bundle agent rh_add_interface_routes(interface, routes) {
# DEPRICATED BY rh_update_routes
# Expects string, array
# vars:
#    "management[172.18.43.0/24]"
#        string => "172.18.43.0/24 via 10.124.4.254",
#        comment => "Needed for communicating with monitoring cluster";
#
#    "management[10.119.156.0/26]"
#        string => "10.119.156.0/26 via 10.124.4.254",
#        comment => "Needed for talking to management interfaces on legacy
#                   network";
# methods:
#    "any" usebundle => rh_add_routes("bond2", "main.management");
#
    classes:
        "supported_os" or => { "centos_5", "redhat_5" };

    vars:
        "route_file"  string => "/etc/sysconfig/network-scripts/route-$(interface)";
        "route_index" slist => getindices("$(routes)");

    files:
        (centos_5|redhat_5)::
            "$(route_file)"
                comment     => "Ensure routes are added properly",
                create      => "true",
                perms       => mog("644", "root", "root"),
                edit_line   => append_if_no_line("$($(this.routes)[$(route_index)])"),
                classes     => if_repaired("route_add_restart_network");

    commands:
        route_add_restart_network::
            "/etc/init.d/network restart",
                ifvarclass => "centos_5|redhat_5";

    reports:
        !supported_os::
            "Sorry I don't know how to work with this OS";

}


