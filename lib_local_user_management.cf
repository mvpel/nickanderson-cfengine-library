# Get the latest version of this library: https://raw.github.com/nickanderson/nickanderson-cfengine-library/master/lib_local_user_management.cf
# General Usage Guidelines
# all of the bundles in this library adhere to the same variable declaration
# format so as to be easily used together.
# 
# Note on password hashes:
# this perl oneliner should generate valid hashed passwords, replace MYPASSWORD
# with your password. Be sure your system supports whatever encryption method
# you choose. Thanks Scott Hunter <scott.hunter.iii@gmail.com> for the oneliners.
# 
#  For sha512: perl -e '@letters = ("A".."Z", "a".."z", "0".."9", "/", "."); $salt = join("", map { $letters[rand@letters]; } (0..85)); print crypt("MYPASSWORD", q[$6$] . $salt) . "\n";'
#  For sha256: perl -e '@letters = ("A".."Z", "a".."z", "0".."9", "/", "."); $salt = join("", map { $letters[rand@letters]; } (0..42)); print crypt("MYPASSWORD", q[$5$] . $salt) . "\n";'
#  For md5:    perl -e '@letters = ("A".."Z", "a".."z", "0".."9", "/", "."); $salt = join("", map { $letters[rand@letters]; } (0..21)); print crypt("MYPASSWORD", q[$1$] . $salt) . "\n";'
# 
#   vars:
#       "users[testuser][gecos]"          string => "My Test User";
#       "users[testuser][uid]"            string => "1500";
#       "users[testuser][gid]"            string => "1500";
#       "users[testuser][home]"           string => "/home/cmdln/tmp/testuserhome";
#       "users[testuser][shell]"          string => "/sbin/nologin";
#       "users[testuser][passwdhash]"     string => "testhash";


bundle agent local_users_enforce_password (users) {
# This bundle enforces a specific hashed password to be set in /etc/shadow
# When the password is changed it also updates the 3rd field (day last changed)
# Generate Hash: echo "mypassword" | makepasswd --clearfrom=- --crypt-md5 |awk '{ print $2 }'
# Usage:
# vars:
#     users[root][passwdhash] string => "$1$EJrfeceC$9y4pFgc6x8p1Fcnfy1rus.";
# methods:
#     "any" usebundle => local_users_enforce_password('currentbundlename.users');
#
    vars:
        any::
            "usersindex"
                slist      => getindices("$(users)");

        linux|solaris|hpux::
            "pwfile"
                string     => "/etc/shadow";

        aix::
            "pwfile"
                string     => "/etc/security/passwd";

        linux|solaris|(hpux.!have_trusted_mode)::
            "days_since_epoch"
                string     => execresult("/usr/bin/perl -le 'print int time/86400'", "noshell"),
                comment    => "Used for password aging; only needed if the password is updated",
                ifvarclass => "set_$(usersindex)_password";

        have_trusted_mode|aix::
            "seconds_since_epoch"
                string     => execresult("/usr/bin/perl -le 'print time'", "noshell"),
                comment    => "Used for HP-UX TCB and AIX password aging, only needed if the password is updated",
                ifvarclass => "set_$(usersindex)_password";
  
    classes:
        hpux::
            "have_trusted_mode"
                comment    => "Determine if this HP-UX system is using Trusted Mode extensions",
                expression => fileexists("/tcb/files/auth/");

            "any"
                comment    => "Get the first character of the username needed to build TCB file path",
                expression => regextract("^(.).*", "$(usersindex)", "$(usersindex)_chars"),
                ifvarclass => "have_trusted_mode";

    files:
        linux|solaris|(hpux.!have_trusted_mode)::
            "$(pwfile)"
                comment     => "Ensure password is set as expected",
                edit_line   => set_user_field("$(usersindex)","2","$($(this.users)[$(this.usersindex)][passwdhash])"),
                classes     => if_repaired("set_$(usersindex)_password");

            "$(pwfile)"
                comment     => "Update date of last password change with todays date expressed in days since epoch if the password is updated",
                edit_line   => set_user_field("$(usersindex)","3","$(days_since_epoch)"),
                ifvarclass  => "set_$(usersindex)_password";

        hpux.have_trusted_mode::
             "/tcb/files/auth/$($(this.usersindex)_chars[1])/$(this.usersindex)"
                comment     => "Ensure TCB password is set as expected",
                edit_line   => set_hpux_tcb("u_pwd", "$($(this.users)[$(this.usersindex)][passwdhash])"),
                classes     => if_repaired("set_$(usersindex)_password");

             "/tcb/files/auth/$($(this.usersindex)_chars[1])/$(this.usersindex)"
                comment     => "Update time of last password change to current time expressed as seconds since epoch if the password is updated",
                edit_line   => set_hpux_tcb("u_succhg", "$(seconds_since_epoch)"),
                ifvarclass  => "set_$(usersindex)_password";

        aix::
             "$(pwfile)"
                comment     => "Ensure password hash is set as expected",
                edit_line   => set_aix_stanza("$(this.usersindex)", "password", "$($(this.users)[$(this.usersindex)][passwdhash])"),
                classes     => if_repaired("set_$(usersindex)_password");

             "$(pwfile)"
                comment     => "Update time of last password change to current time expressed as seconds since epoch if the password is updated",
                edit_line   => set_aix_stanza("$(this.usersindex)", "lastupdate", "$(seconds_since_epoch)"),
                ifvarclass  => "set_$(usersindex)_password";

    reports:
        verbose_mode.(linux|solaris|aix|(hpux.!have_trusted_mode))::
            "$(usersindex) password hash was set in $(this.pwfile)",
                ifvarclass => "set_$(usersindex)_password";

        verbose_mode.hpux.have_trusted_mode::
            "$(usersindex) password hash was set in /tcb/files/auth/$($(usersindex)_chars[1])/$(usersindex)",
                ifvarclass => "set_$(usersindex)_password";
}

bundle edit_line set_hpux_tcb(key, value)
# Insures an existing key in the HP-UX Trusted Mode TCB database
# target file is set to the specified value.
{
    replace_patterns:
	    ":($(key))([=#])(?!$(value))[^:]*(:|\\\\|$)"
                comment      => "Ensure the TCB key in the target file is set to the specified value",
                replace_with => replace_hpux_tcb_value("$(value)");
}

body replace_with replace_hpux_tcb_value(value)
{
  replace_value => ":$(match.1)$(match.2)$(value)$(match.3)";
  occurrences   => "all";
}

bundle edit_line set_aix_stanza(stanza_tag, key, value)
# Insures an existing key in the specified stanza of an AIX
# stanza-oriented config file, such as /etc/security/password,
# is set to the specified value.
{
    replace_patterns:
        "(\h*)($(key))(\h*=\h*)(?!$(value)).*"
             select_region => select_aix_stanza("$(stanza_tag)"),
             replace_with  => replace_aix_stanza_value("$(value)");
}

body select_aix_stanza(stanza_tag)
{
  select_start            => "^$(stanza_tag):";
  select_end              => "^\h*$";
}

body replace_aix_stanza_value(value)
{
  replace_value => "$(match.1)$(match.2)$(match.3)$(value)";
  occurrences   => "all";
}
